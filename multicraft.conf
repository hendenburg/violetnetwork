#! /bin/sh

### Script Info
#Script Use:    To start, end, and manage the Multicraft Installation
#Author:        Thomas Morton
##

local log_file = "/var/log/multicraftinstall.log"
local running_status = 0
local spinster = 0


loading_spinster() {
    case $spinster in
        0) echo -en "Waiting [|]\r" ;;
        1) echo -en "Waiting [/]\r" ;;
        2) echo -en "Waiting [-]\r" ;;
        3) echo -en "Waiting [\]\r" ;;
        *) if [$spinster -gt 3] then $spinster=0 ; loading_spinster fi ;;
    esac
}
log() {                                                     #Used for easy logging to a predetermined log file
    if [-a $log_file] then                                  #Determines if log file is created
        echo -e "\n"$1 >> $log_file                            #If Log file is created, logs argument
    else                                                    #If the Log file is not created:
        touch $log_file                                        #Creates the log file
      if [-a $log_file] then                                #Checks again if the log file is created                                
        echo -e "\n"$1 >> $log_file                          #If it is, completes the program
      else                                                  #Otherwise:
        echo -e "\e[31mUnable to log files, good luck"       #Prays for mercy
      fi
    fi
}
check_userlevel() {                                         #Determining whether is at startup or in terminal
    if [[ -t]]; then                                        #Determantes whether run from a terminal
        sudo "$0" "$@"
        log "[Script Log]    User Logs in as root"             #Requieres the users to authorize root level actions
    fi
}
check_running_status() {                                    #Check whether process is currently running
    ps cax | grep httpd > /dev/null                         #Greping ps, if grep finds nothing it returns 0
    if [ $? -eq 0] then                                     #If the previous command returns 0, state on
        running_status=0                                       #Specifies that the program is not running
        echo -e "\e[1mProgram Status: [\e[92Off]"
        log "[Script Log]    The Program is marked as Not Running"
    else
        running_status=1                                       #Specifies that the program is running
        "\e[1mProgram Status: [\e[92mOn]"
        log "[Script Log]    The Program is Marked as Running"
    fi
}
wait_for_close() {
    while [$running_status -eq 1] do
        check_running_status
        loading_spinster
        $spinster = $(($spinster + 1))
    done
    if [$running_status -eq 0] then
        echo -e "\e[1mProgram Status: [\e[92Off]"
    fi
}
start_daemon() {
    if [$running_status -eq 0] then                         #Checks whether the Program is Running
        echo -e "\e[1mProgram Status: [\e[92mOff]"             
        screen -m -L "/home/minecraft/multicraft/bin/multicraft -nv start" #Starts a screen session, with the program
        check_running_status
      if [$running_status -eq 1] then
        echo -e "\e[1mProgram Status: [\e[92mOn]"
        echo "The Program has been started"
        log "[Script Log]    The Program Has Started"
      else
        echo -e "\e[1mProgram Status: [\e[31mOn]"
        echo -e "The Program has not started, You\'re on your own, check the logs"
        exit
        log "[Script Log]    The Program has Failed to Start"
     fi
    fi
}
stop_daemon() {
    if [$running_status -eq 1] then
        echo -e "\e[1mProgram Status: [\e[92mOn]"
        pkill -9 multicraft
        check_running_status
        /home/minecraft/multicraft/bin/multicraft -nv stop
        echo -e "waiting for the program to shut down"
        wait_for_close
        echo -e "Program has closed"
    fi


}

case "$1" in
 start)
        check_userlevel
        check_running_status
        start_daemon
        exit
        ;;
 stop)
        check_userlevel
        check_running_status
        stop_daemon
        exit
        ;;
 restart)
        echo -e "restarting daemon.."
        check_userlevel
        check_running_status
        stop_daemon
        start_daemon
        exit
        ;;
 force-stop)
        echo -e "forcing off.."
        check_userlevel
        check_running_status
        pkill -9 multicraft
        check_running_status
        exit
        ;;
 force_restart)
        echo -e "forcing restart.."
        check_userlevel
        check_running_status
        pkill -9 multicraft
        start_daemon
        exit
        ;;
 status)
        check_running_status
        exit
        ;;
 help)
        case "$2" in
            start) echo -e "Start- Starts the multicraft daemon, safe start" ;;
            stop)  echo -e "Stop- Stops the daemon safely, long time, but safer for the users and server (reccomended)" ;;
            restart) echo -e "Restart- restarts the daeomon safely, waiting for it to close, and then starting it" ;;
            force-stop) echo -e "Force-stop- Forces the program to stop, whether it has shutdown scripts or not" ;;
            force_restart) echo -e "Force-restart- forces the program to restart, whether it wants to or not" ;;
            status) echo -e "Shows the current status of the server" ;;
            help) echo -e "Gives help, smart-alek"

*)      echo -e "Usage (start|stop|restart|force-stop|status|help) \n type in multicraftd help 'arg' to read more, one each"
        ;;



        
            
        
